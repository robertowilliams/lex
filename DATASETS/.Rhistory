install.packages('swfscMisc')
install.packages('devtools')
# defining variables
Q1 <- 163.8
Q2 <- 177.8
# Calculating the IQR
IQR <- Q2-Q1
# Publishiung the result.
paste('The IQR is ',IQR)
mu_ <- 171.1
X1 <- 180
X2 <- 155
Sigma_ <- 9.4
Z1 <- (X1-mu_)/Sigma_
Z2 <- (X2-mu_)/Sigma_
Z1
Z2
n <- 507
Sigma_ <- 9.4
StandardError <- Sigma_/sqrt(n)
show(paste('The Standard Error is ', (round(StandardError, digits = 2))))
x <- 32 # months.
n <- 36 # individual samples
sd_ <- 4.31 # standard deviation, data given with the graph.
mean_ <- 30.69 # mean, data given with the graph.
sig_level <- 0.10 # significance level
# Calculating pnorm
se_ <- sd_/sqrt(n)
z <- (mean_ - x)/se_
p_value <- pnorm(z)
p_value
z <- 1.645# Z for the 90% of confidence interval.
n <- 36 # sample, data given with the graph.
sd_ <- 4.31 # standard deviation, data given with the graph.
mean_ <- 30.69 # mean, data given with the graph.
se_ <- sd_/sqrt(n) # standard error.
paste("The upper side =", round(conf_int_pos <- mean_ + (z*se_), digits = 2))
paste("The lower side =", round(conf_int_neg <- mean_ - (z*se_), digits = 2))
Mean_= 118.2
n=36
sd_=6.5
se_=sd_/sqrt(n)
paste('se =', round(se_, digits = 3))
z = (100-mean)/se_
mean_= 118.2
n=36
sd_=6.5
se_=sd_/sqrt(n)
paste('se =', round(se_, digits = 3))
z = (100-mean_)/se_
paste('z-score = ', round(z, digits = 3))
paste('p-value=',pnorm(z,))
# defining variables
Q1 <- 163.8
Q2 <- 177.8
# Calculating the IQR
IQR <- Q2-Q1
# Publishiung the result.
paste('The IQR is ',IQR)
mu_ <- 171.1
X1 <- 180
X2 <- 155
Sigma_ <- 9.4
Z1 <- (X1-mu_)/Sigma_
Z2 <- (X2-mu_)/Sigma_
Z1
Z2
n <- 507
Sigma_ <- 9.4
StandardError <- Sigma_/sqrt(n)
show(paste('The Standard Error is ', (round(StandardError, digits = 2))))
x <- 32 # months.
n <- 36 # individual samples
sd_ <- 4.31 # standard deviation, data given with the graph.
mean_ <- 30.69 # mean, data given with the graph.
sig_level <- 0.10 # significance level
# Calculating pnorm
se_ <- sd_/sqrt(n)
z <- (mean_ - x)/se_
p_value <- pnorm(z)
p_value
z <- 1.645# Z for the 90% of confidence interval.
n <- 36 # sample, data given with the graph.
sd_ <- 4.31 # standard deviation, data given with the graph.
mean_ <- 30.69 # mean, data given with the graph.
se_ <- sd_/sqrt(n) # standard error.
paste("The upper side =", round(conf_int_pos <- mean_ + (z*se_), digits = 2))
paste("The lower side =", round(conf_int_neg <- mean_ - (z*se_), digits = 2))
mean_= 118.2
n=36
sd_=6.5
se_=sd_/sqrt(n)
paste('se =', round(se_, digits = 3))
z = (100-mean_)/se_
paste('z-score = ', round(z, digits = 3))
paste('p-value=',pnorm(z,))
mean_ <- 118.2
n <- 36
z <- 1.645# Z for the 90% of confidence interval.
sd_ <- 6.5
se_=sd_/sqrt(n)
paste('se =', round(se_, digits = 3))
paste("The upper side =", round(conf_int_pos <- mean_ + (z*se_), digits = 2))
paste("The lower side =", round(conf_int_neg <- mean_ - (z*se_), digits = 2))
(z*se_)
# defining variables
Q1 <- 163.8
Q2 <- 177.8
# Calculating the IQR
IQR <- Q2-Q1
# Publishiung the result.
paste('The IQR is ',IQR)
mu_ <- 171.1
X1 <- 180
X2 <- 155
Sigma_ <- 9.4
Z1 <- (X1-mu_)/Sigma_
Z2 <- (X2-mu_)/Sigma_
Z1
Z2
n <- 507
Sigma_ <- 9.4
StandardError <- Sigma_/sqrt(n)
show(paste('The Standard Error is ', (round(StandardError, digits = 2))))
x <- 32 # months.
n <- 36 # individual samples
sd_ <- 4.31 # standard deviation, data given with the graph.
mean_ <- 30.69 # mean, data given with the graph.
sig_level <- 0.10 # significance level
# Calculating pnorm
se_ <- sd_/sqrt(n)
z <- (mean_ - x)/se_
p_value <- pnorm(z)
p_value
z <- 1.645# Z for the 90% of confidence interval.
n <- 36 # sample, data given with the graph.
sd_ <- 4.31 # standard deviation, data given with the graph.
mean_ <- 30.69 # mean, data given with the graph.
se_ <- sd_/sqrt(n) # standard error.
paste("The upper side =", round(conf_int_pos <- mean_ + (z*se_), digits = 2))
paste("The lower side =", round(conf_int_neg <- mean_ - (z*se_), digits = 2))
M= 118.2
n=36
sd_=6.5
se_=sd_/sqrt(n)
paste('se =', round(se_, digits = 3))
z = (100- M)/se_
paste('z-score = ', round(z, digits = 3))
paste('p-value=',pnorm(z))
mean_ <- 118.2
n <- 36
z <- 1.645# Z for the 90% of confidence interval.
sd_ <- 6.5
se_=sd_/sqrt(n)
paste('se =', round(se_, digits = 3))
paste("The upper side =", round(conf_int_pos <- mean_ + (z*se_), digits = 2))
paste("The lower side =", round(conf_int_neg <- mean_ - (z*se_), digits = 2))
(z*se_)
install.packages("EnvStats")
# First Part
GeometricalMean<-function(vector_values){
prod(vector_values)^(1/length(vector_values))
}
# Testing the function created with the R "geoMean" function from EnvStats
library(EnvStats)
x <- c(3, 5, 7)
# storaging the results in the variables
Env_result <- geoMean(x)
My_result <- GeometricalMean(x)
paste('The EnvStats function gives:', Env_result)
paste('My function gives:' , My_result)
# Second Part
HM <- function(x){
L <- length(x)
hm_ <- 0
if ((sum(x<0))==0){
for (i in (1:L)) {
hm_ <- hm_ + (1/x[i])
return(hm_)
}
}else{
paste('The vector given has negative elements')
}
}
# Testing
x<- c(1,5,8,10)
HM(x)
x<- c(1,5,8,10)
sum(x<0)
sum_third <- function(x){
new_vector <- x[seq(0, length(x), 3)]
result <- sum(new_vector)
return(result)
}
# Testing
x<- (1:120)
sum_third(x)
name_discover <- function(x){
res_names <- names(x)
}
# Creating a vector for testing.
x <- c(Inf, -Inf, -10, 0, 10, NaN, NA)
# Testing the vector X
paste('Inf | -Inf | -10 | 0   | 10 | NaN | NA  |')
is.finite(x)
!is.infinite(x)
is.infinite(x)
x <- c(-Inf,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15, Inf, NaN, NA)
x[-which(x > 0)]
x[x <= 0]
# Creating a test matrix.
paste('Test Matrix')
show(m2 <- matrix(1:25, 5, 5))
paste('_______________________')
# Applying upper.tri()
paste('Result of upper.tri()')
show(upper.tri(m2))
paste('_______________________')
m2[upper.tri(m2)] <- NA
paste('Subsetting a matrix')
m2
to.string <- function(x) {
string <- x[1]
for(i in 2:length(x)) {
string <- paste(string, x[i], sep="")
}
return(string)
}
x <- c(-Inf,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15, Inf, NaN, NA)
to.string <- function(x) {
string <- x[1]
for(i in 2:length(x)) {
string <- paste(string, x[i], sep="")
}
return(string)
}
to.string(x)
to.string <- function(x) {
string <- x[1]
for(i in 2:length(x)) {
string <- paste(string, x[i], sep="")
}
return(string)
}
#to.string(2:17)`
#result:
#Error: Incomplete expression:
#to.string(2:17)`
x <- c(-Inf,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15, Inf, NaN, NA)
to.string <- function(x) {
return(toString(x))
}
to.string(x)
sizes <- factor(sizes, levels = c("S", "M", "L", "XL", "XXL"))
setwd("~/Documents/MONIDRA3/LEX/NOTEBOOK/DATASETS")
library(readr)
Dataset_removed_lower40_label_8kV3 <- read_csv("MINING_2/Dataset_removed_lower40_label_8kV3.csv")
View(Dataset_removed_lower40_label_8kV3)
write.csv(Dataset_removed_lower40_label_8kV3, 'DatasetFromR.csv')
